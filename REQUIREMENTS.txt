******** THE BASICS ********

Goal: Create a Facebook-like social network that will contain the following features:

▢ Followers 
▢ Profile
▢ Posts
▢ Groups
▢ Notification
▢ Chats

Frontend: Can use framework - React

Backend Basics:

Server: Caddy - https://caddyserver.com/docs/ or create your own web server

App: Authentication - HTTP, sessions and cookies
    Image handling - Supporting various types of extensions, at least: JPEG, PNG and GIF types. You will have to store the images, it can be done by storing the file/path in the database and saving the image in a specific file system.
    Websocket - Handling the connections in real time, between clients. For private chats.

Database: Sqlite

Docker:
Requires 2 images for backend and frontend. You will have to publish the ports for both back and frontend.

_______________________________________________________________________________________________________

******** DETAILED REQUIREMENTS ON THE APP ********

1. Authentication/ Registration form:  ===> For Database

Must haves: Email, Password, First Name, Last Name, Date of Birth, Password
Optional: Avatar/Image (Optional), Nickname (Optional), About Me (Optional)

*Frontend: Avatar/Image, Nickname and About Me should be present in the form but the user can skip the filling of those fields.

2. Followers:

Must have: Users are able to follow and unfollow other users. To unfollow an user, you need to follow him/her first (duh)
For private users: Request to follow => user has choices to accept or decline
For public users: Follow/ Unfollow freely

3. Profile: 
Types:
- Public profile: Info can be viewed by everyone
- Private profile: Infor can be viewed by followers

Should contain : 
- User information (Email, Password, First Name, Last Name, Date of Birth)
- User activity
- Every post made by the user
- Followers and following users 
- Button to public/private their profile

4. Posts: After a user is logged in
- Can create posts and comments on already created posts. Post and comment can include image/gif
- The user must be able to specify the privacy of the post:
▢  public 
▢ private
▢ almost private (only the followers chosen by the creator of the post will be able to see it)

5. Groups: A user must be able to create a group. 
 
Must haves: A title, a description by creator. Creator can invite others to join the group.
            Invited users can accept the invitation and invite other people once they are members.
            Users can requests to join the group. Creator can choose to accept or decline

Group discovery function/ All groups: Where a user can browse all the groups.

In a group, user can: - Create post, comment on posts. Posts and comments only visible to members.
                      - Create an event, make it available to other members. 
                        An event should have: Title, Description, Day/Time, at least 2 options of Going or Not Going

6. Chat
- Send private messages to users that he/she is following, or to a public profile. Must have emojis. 
- Messages will be sent instantly, using websockets.
- Groups should have a common chat room, so if a user is a member of the group he/she should be able to send and receive messages to this group chat.

7. Notifications
- Notifications on every pages. New notifications are different from new private messages and should be displayed in a different way!

A user should be notified if he/she:

- Follow requests
- Group invitation
- Another user requests to join the group (if user is creator)
- An event is created in the group that you are a member
- Every other notification created by you that isn't on the list is welcomed too.

_______________________________________________________________________________________________________

******** MIGRATE ******** 
//The application of migrations and the file organization will be tested.

You will have to create migrations for this project so every time the application runs, it creates the specific tables to make the project work properly.

For this, you must focus on a folder structure similar to this one:

student$ tree .
backend
├── pkg
│   ├── db
│   │   ├── migrations
│   │   │   └── sqlite
│   │   │       ├── 000001_create_users_table.down.sql
│   │   │       ├── 000001_create_users_table.up.sql
│   │   │       ├── 000002_create_posts_table.down.sql
│   │   │       └── 000002_create_posts_table.up.sql
│   │   └── sqlite
│   |       └── sqlite.go
|   |
|   └── ...other_pkgs.go
|
└── server.go

The folder structure is organized in a way that helps you to understand and use migrations, where you can apply it using a simple path, for example: file://backend/pkg/db/migrations/sqlite. It can be organized as you wish but do not forget that the application of migrations and the file organization will be tested.

For migrations you can use golang-migrate package or other package that better suits your project.

All migrations should be stored on a specific folder, as above. The sqlite.go should present the connection to the database, the applying of the migrations and other useful functionalities that you may need to implement.

This migration system can help you manage your time and testing, by filling your database.


_______________________________________________________________________________________________________

******** ALLOWED PACKAGES ********

The standard Go packages are allowed
Gorilla websocket
golang-migrate
sql-migration
migration
sqlite3
bcrypt
UUID

This project will help you learn about:

Authentication :
Sessions and cookies
Using and setting up Docker
Containerizing an application
Compatibility/Dependency
Creating images
SQL language
Manipulation of databases
Migrations
The basics of encryption
Websocket

Github project requirements: https://github.com/01-edu/public/tree/master/subjects/social-network

_______________________________________________________________________________________________________

******** AUDITS ********

Full: https://github.com/01-edu/public/tree/master/subjects/social-network/audit

- Use only allowed packages
- File system for backend + frontend is well organized

Database
- Is SQLite being used in the project as the database
- Does the app implement a migration system
- Is that migration file system well organized
- Are the migrations being applied by the migration system? (start the app, then enter the database using the command "sqlite3 <database_name.db>") ???

Authentication
- Does the app implement sessions for the authentication of the users?
- Are the correct form elements being used in the registration? (Email, Password, First Name, Last Name, Date of Birth, Avatar/Image (Optional), Nickname (Optional), About Me (Optional))
- Did the app saved the registered user without error?
- Try to log in with the user you just registered. Did the log in worked without problem?
- Try to log in with the user you created, but with a wrong password or email. Did the app detect if the email or password was wrong?
- Try to register the same user you already registered. Did the app detect if the email/user is already present in the database?
- Open two browsers (ex: Chrome and Firefox), log in into one and refresh the other browsers. Can you confirm that the browser non logged remains unregistered?
- Using the two browsers, log in with different users in each one. Then refresh both the browsers. Can you confirm that both browsers continue with the right users?

Followers
- Are you able to send a following request to the private user?
- Are you able to follow the public user without the need of sending a following request?
- Open two browsers(ex: Chrome and Firefox), log in as two different private users and with one of them try to follow the other. Is the user who received the request able to accept or decline the following request?
- After following another user successfully try to unfollow him.

Profile
- Does the profile displays every information requested in the register form, apart from the password?
- Does the profile displays every post created by the user?
-  Does the profile displays the users that you follow and the ones who are following you?
-  Are you able to change between private profile and public profile?
- Open two browsers and log in with different users on them
    Are you able to see a followed user private profile?
    Are you prevented from seeing a non-followed user private profile?
    Are you able to see a non-followed user public profile?
    Are you able to see a followed user public profile?

Posts
- Are you able to create a post and comment on already existing posts after logging in?
- Are you able to include an image (JPG or PNG) or a GIF on a post?
- Are you able to include an image (JPG or PNG) or a GIF on a comment?
- Can you specify the type of privacy of the post (private, public, almost private)?
- If you choose the almost private privacy option, can you specify the users that are allowed to see the post?

Groups
- Try creating a group.
- Were you able to invite one of your followers to join the group?
- Did the other user received a group invitation that he/she can refuse/accept?
- Did the owner of the group received a request that he/she can refuse/accept?
- Can a user make group invitations, after being part of the group (being the user different from the creator of the group)?
- Can a user make a group entering request (a request to enter a group)?
- After being part of a group, can the user create posts and comment already created posts?
- Try to create an event in a group.
- Were you asked for a title, a description, a day/time and at least two options (going, not going)?
- Is the other user able to see the event and vote in which option he wants?

Chat
- Did the other user received the message in realtime?
- Did the chat between the users went well? (did not crash the server)
Try and open three browsers (ex: Chrome and Firefox or a private browser)
- Did only the targeted user received the message?
- Did all the users that are common to the group receive the message in realtime?
- Did the chat between the users went well? (did not crash the server)
- Can you confirm that it is possible to send emojis via chat to other users?

Notifications
- Can you check the notifications on every page of the project?
- Did the other user received a notification regarding the following request?
- Did the invited user received a notification regarding the group invitation request?
- Did the other user received a notification regarding the group entering request?
- Did the other user received a notification regarding the creation of the event?

Docker
- Try and run the application, then use the docker command "docker ps -a"
- Can you confirm that there are two containers, one for the backend and the other for the frontend?

Bonus
+ Can you log in using Github or other type of external OAuthenticator (open standard for access delegation)?
+ Did the student created a migration to fill the database?
+ If you unfollow a user, do you get a confirmation pop-up?
+ If you change your profile from public to private (or vice versa), do you get a confirmation pop-up?
+ Is there other notification apart from the ones explicit on the subject?
+ Does the project present a script to build the images and containers? (using a script to simplify the build)
+ Do you think in general this project is well done?


